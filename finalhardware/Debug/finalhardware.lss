
finalhardware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000542  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000128  00800060  00000542  000005d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  00800188  00800188  000006fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000730  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  0000076c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014e3  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006db  00000000  00000000  00001cd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000078d  00000000  00000000  000023b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  00002b40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c0  00000000  00000000  00002c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000092d  00000000  00000000  00003038  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00003965  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e4       	ldi	r30, 0x42	; 66
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a8 e8       	ldi	r26, 0x88	; 136
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 3a       	cpi	r26, 0xA8	; 168
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 68 02 	call	0x4d0	; 0x4d0 <main>
  8a:	0c 94 9f 02 	jmp	0x53e	; 0x53e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <usart_init>:

{

	while(!(UCSRA & (1<<UDRE))); //wait until UDR is empty

	UDR=ch;
  92:	88 e1       	ldi	r24, 0x18	; 24
  94:	8a b9       	out	0x0a, r24	; 10
  96:	84 e4       	ldi	r24, 0x44	; 68
  98:	80 bd       	out	0x20, r24	; 32
  9a:	83 e3       	ldi	r24, 0x33	; 51
  9c:	89 b9       	out	0x09, r24	; 9
  9e:	08 95       	ret

000000a0 <lcdcmd>:
  a0:	8b bb       	out	0x1b, r24	; 27
  a2:	c2 9a       	sbi	0x18, 2	; 24
  a4:	85 e8       	ldi	r24, 0x85	; 133
  a6:	8a 95       	dec	r24
  a8:	f1 f7       	brne	.-4      	; 0xa6 <lcdcmd+0x6>
  aa:	00 00       	nop
  ac:	88 b3       	in	r24, 0x18	; 24
  ae:	88 7f       	andi	r24, 0xF8	; 248
  b0:	88 bb       	out	0x18, r24	; 24
  b2:	81 ee       	ldi	r24, 0xE1	; 225
  b4:	94 e0       	ldi	r25, 0x04	; 4
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <lcdcmd+0x16>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <lcdcmd+0x1c>
  bc:	00 00       	nop
  be:	08 95       	ret

000000c0 <lcdint>:
  c0:	81 ee       	ldi	r24, 0xE1	; 225
  c2:	94 e0       	ldi	r25, 0x04	; 4
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <lcdint+0x4>
  c8:	00 c0       	rjmp	.+0      	; 0xca <lcdint+0xa>
  ca:	00 00       	nop
  cc:	88 e3       	ldi	r24, 0x38	; 56
  ce:	0e 94 50 00 	call	0xa0	; 0xa0 <lcdcmd>
  d2:	95 e8       	ldi	r25, 0x85	; 133
  d4:	9a 95       	dec	r25
  d6:	f1 f7       	brne	.-4      	; 0xd4 <lcdint+0x14>
  d8:	00 00       	nop
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	0e 94 50 00 	call	0xa0	; 0xa0 <lcdcmd>
  e0:	85 e8       	ldi	r24, 0x85	; 133
  e2:	8a 95       	dec	r24
  e4:	f1 f7       	brne	.-4      	; 0xe2 <lcdint+0x22>
  e6:	00 00       	nop
  e8:	8e e0       	ldi	r24, 0x0E	; 14
  ea:	0e 94 50 00 	call	0xa0	; 0xa0 <lcdcmd>
  ee:	95 e8       	ldi	r25, 0x85	; 133
  f0:	9a 95       	dec	r25
  f2:	f1 f7       	brne	.-4      	; 0xf0 <lcdint+0x30>
  f4:	00 00       	nop
  f6:	08 95       	ret

000000f8 <lcddata>:
  f8:	8b bb       	out	0x1b, r24	; 27
  fa:	88 b3       	in	r24, 0x18	; 24
  fc:	85 60       	ori	r24, 0x05	; 5
  fe:	88 bb       	out	0x18, r24	; 24
 100:	85 e8       	ldi	r24, 0x85	; 133
 102:	8a 95       	dec	r24
 104:	f1 f7       	brne	.-4      	; 0x102 <lcddata+0xa>
 106:	00 00       	nop
 108:	88 b3       	in	r24, 0x18	; 24
 10a:	89 7f       	andi	r24, 0xF9	; 249
 10c:	88 bb       	out	0x18, r24	; 24
 10e:	81 ee       	ldi	r24, 0xE1	; 225
 110:	94 e0       	ldi	r25, 0x04	; 4
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <lcddata+0x1a>
 116:	00 c0       	rjmp	.+0      	; 0x118 <lcddata+0x20>
 118:	00 00       	nop
 11a:	08 95       	ret

0000011c <lcd_print>:
 11c:	0f 93       	push	r16
 11e:	1f 93       	push	r17
 120:	cf 93       	push	r28
 122:	fc 01       	movw	r30, r24
 124:	80 81       	ld	r24, Z
 126:	88 23       	and	r24, r24
 128:	59 f0       	breq	.+22     	; 0x140 <lcd_print+0x24>
 12a:	8f 01       	movw	r16, r30
 12c:	c0 e0       	ldi	r28, 0x00	; 0
 12e:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcddata>
 132:	cf 5f       	subi	r28, 0xFF	; 255
 134:	f8 01       	movw	r30, r16
 136:	ec 0f       	add	r30, r28
 138:	f1 1d       	adc	r31, r1
 13a:	80 81       	ld	r24, Z
 13c:	81 11       	cpse	r24, r1
 13e:	f7 cf       	rjmp	.-18     	; 0x12e <lcd_print+0x12>
 140:	cf 91       	pop	r28
 142:	1f 91       	pop	r17
 144:	0f 91       	pop	r16
 146:	08 95       	ret

00000148 <usart_user>:
 148:	0f 93       	push	r16
 14a:	1f 93       	push	r17
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	c7 e9       	ldi	r28, 0x97	; 151
 152:	d1 e0       	ldi	r29, 0x01	; 1
 154:	0c e9       	ldi	r16, 0x9C	; 156
 156:	11 e0       	ldi	r17, 0x01	; 1
 158:	5f 9b       	sbis	0x0b, 7	; 11
 15a:	fe cf       	rjmp	.-4      	; 0x158 <usart_user+0x10>
 15c:	8c b1       	in	r24, 0x0c	; 12
 15e:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <value>
 162:	89 93       	st	Y+, r24
 164:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcddata>
 168:	83 ed       	ldi	r24, 0xD3	; 211
 16a:	90 e3       	ldi	r25, 0x30	; 48
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <usart_user+0x24>
 170:	00 c0       	rjmp	.+0      	; 0x172 <usart_user+0x2a>
 172:	00 00       	nop
 174:	c0 17       	cp	r28, r16
 176:	d1 07       	cpc	r29, r17
 178:	79 f7       	brne	.-34     	; 0x158 <usart_user+0x10>
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	1f 91       	pop	r17
 180:	0f 91       	pop	r16
 182:	08 95       	ret

00000184 <usart_pass>:
 184:	0f 93       	push	r16
 186:	1f 93       	push	r17
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	c8 e8       	ldi	r28, 0x88	; 136
 18e:	d1 e0       	ldi	r29, 0x01	; 1
 190:	0c e8       	ldi	r16, 0x8C	; 140
 192:	11 e0       	ldi	r17, 0x01	; 1
 194:	5f 9b       	sbis	0x0b, 7	; 11
 196:	fe cf       	rjmp	.-4      	; 0x194 <usart_pass+0x10>
 198:	8c b1       	in	r24, 0x0c	; 12
 19a:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <value>
 19e:	89 93       	st	Y+, r24
 1a0:	8a e2       	ldi	r24, 0x2A	; 42
 1a2:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcddata>
 1a6:	83 ed       	ldi	r24, 0xD3	; 211
 1a8:	90 e3       	ldi	r25, 0x30	; 48
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <usart_pass+0x26>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <usart_pass+0x2c>
 1b0:	00 00       	nop
 1b2:	c0 17       	cp	r28, r16
 1b4:	d1 07       	cpc	r29, r17
 1b6:	71 f7       	brne	.-36     	; 0x194 <usart_pass+0x10>
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	1f 91       	pop	r17
 1be:	0f 91       	pop	r16
 1c0:	08 95       	ret

000001c2 <usart_tx>:
}

//**************************************************************************************************************
void usart_tx(char x)
{
	UDR = x;							//--- Move data to UDR Data Reg
 1c2:	8c b9       	out	0x0c, r24	; 12
	while (!(UCSRA & (1<<UDRE)));		//--- Check whether UDR is empty
 1c4:	5d 9b       	sbis	0x0b, 5	; 11
 1c6:	fe cf       	rjmp	.-4      	; 0x1c4 <usart_tx+0x2>
}
 1c8:	08 95       	ret

000001ca <usart_msg>:

//**************************************************************************************************************
void usart_msg(char *c)
{
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	ec 01       	movw	r28, r24
	while (*c != 0)						//--- Check for null
 1d0:	88 81       	ld	r24, Y
 1d2:	88 23       	and	r24, r24
 1d4:	31 f0       	breq	.+12     	; 0x1e2 <usart_msg+0x18>
 1d6:	21 96       	adiw	r28, 0x01	; 1
	usart_tx(*c++);
 1d8:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <usart_tx>
}

//**************************************************************************************************************
void usart_msg(char *c)
{
	while (*c != 0)						//--- Check for null
 1dc:	89 91       	ld	r24, Y+
 1de:	81 11       	cpse	r24, r1
 1e0:	fb cf       	rjmp	.-10     	; 0x1d8 <usart_msg+0xe>
	usart_tx(*c++);
}
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <usart_rx>:

//**************************************************************************************************************
char usart_rx()
{
	while(!(UCSRA & (1<<RXC)));		//--- Check whether Receive is complete
 1e8:	5f 9b       	sbis	0x0b, 7	; 11
 1ea:	fe cf       	rjmp	.-4      	; 0x1e8 <usart_rx>
	choice = UDR;						//--- Return Data from UDR
 1ec:	8c b1       	in	r24, 0x0c	; 12
 1ee:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <choice>
 1f2:	08 95       	ret

000001f4 <user_choice>:

}

//*********************************************************************************
void user_choice(){
	usart_msg("Enter Choice");// print on USART terminal
 1f4:	8b e6       	ldi	r24, 0x6B	; 107
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 e5 00 	call	0x1ca	; 0x1ca <usart_msg>
	
	usart_tx(0x0d); 
 1fc:	8d e0       	ldi	r24, 0x0D	; 13
 1fe:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <usart_tx>
	usart_msg("PRESS 1 TO TURN LED ON");// option to turn led on
 202:	88 e7       	ldi	r24, 0x78	; 120
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 e5 00 	call	0x1ca	; 0x1ca <usart_msg>
	
	usart_tx(0x0d);
 20a:	8d e0       	ldi	r24, 0x0D	; 13
 20c:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <usart_tx>
	usart_msg("PRESS 2 TO TURN LED AND FAN ON");// option to turn led and fan on
 210:	8f e8       	ldi	r24, 0x8F	; 143
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 e5 00 	call	0x1ca	; 0x1ca <usart_msg>
	
	usart_tx(0x0d);
 218:	8d e0       	ldi	r24, 0x0D	; 13
 21a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <usart_tx>
	usart_msg("PRESS 3 TO TURN FAN ON");// option to turn fan on
 21e:	8e ea       	ldi	r24, 0xAE	; 174
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 e5 00 	call	0x1ca	; 0x1ca <usart_msg>
	
	usart_tx(0x0d);
 226:	8d e0       	ldi	r24, 0x0D	; 13
 228:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <usart_tx>
	usart_msg("PRESS 4 TO TURN LED OFF");// option to turn led off
 22c:	85 ec       	ldi	r24, 0xC5	; 197
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 e5 00 	call	0x1ca	; 0x1ca <usart_msg>
	
	usart_tx(0x0d);
 234:	8d e0       	ldi	r24, 0x0D	; 13
 236:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <usart_tx>
	usart_msg("PRESS 5 TO TURN FAN OFF"); // option to turn fan off
 23a:	8d ed       	ldi	r24, 0xDD	; 221
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <usart_msg>
	
	usart_tx(0x0d);
 242:	8d e0       	ldi	r24, 0x0D	; 13
 244:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <usart_tx>
	usart_msg("PRESS 6 TO TURN OFF EVERYTHING");// turn off everything
 248:	85 ef       	ldi	r24, 0xF5	; 245
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 e5 00 	call	0x1ca	; 0x1ca <usart_msg>
	
	usart_tx(0x0d);
 250:	8d e0       	ldi	r24, 0x0D	; 13
 252:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <usart_tx>
	usart_msg("AND LOCK DOOR");
 256:	84 e1       	ldi	r24, 0x14	; 20
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <usart_msg>
	usart_tx(0x0d);
 25e:	8d e0       	ldi	r24, 0x0D	; 13
 260:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <usart_tx>
	
	
	choice =usart_rx();
 264:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <usart_rx>
 268:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <choice>
	switch(choice){
 26c:	83 33       	cpi	r24, 0x33	; 51
 26e:	89 f1       	breq	.+98     	; 0x2d2 <user_choice+0xde>
 270:	28 f4       	brcc	.+10     	; 0x27c <user_choice+0x88>
 272:	81 33       	cpi	r24, 0x31	; 49
 274:	59 f0       	breq	.+22     	; 0x28c <user_choice+0x98>
 276:	82 33       	cpi	r24, 0x32	; 50
 278:	c1 f0       	breq	.+48     	; 0x2aa <user_choice+0xb6>
 27a:	08 95       	ret
 27c:	85 33       	cpi	r24, 0x35	; 53
 27e:	09 f4       	brne	.+2      	; 0x282 <user_choice+0x8e>
 280:	48 c0       	rjmp	.+144    	; 0x312 <user_choice+0x11e>
 282:	c0 f1       	brcs	.+112    	; 0x2f4 <user_choice+0x100>
 284:	86 33       	cpi	r24, 0x36	; 54
 286:	09 f4       	brne	.+2      	; 0x28a <user_choice+0x96>
 288:	55 c0       	rjmp	.+170    	; 0x334 <user_choice+0x140>
 28a:	08 95       	ret
		case '1':
			usart_tx(0x0d);
 28c:	8d e0       	ldi	r24, 0x0D	; 13
 28e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <usart_tx>
		
			PORTC = PORTC | 0b00000001;// turn led on which is connected to PC0
 292:	a8 9a       	sbi	0x15, 0	; 21
			usart_tx(0x0d);
 294:	8d e0       	ldi	r24, 0x0D	; 13
 296:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <usart_tx>
			user_choice();
 29a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <user_choice>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29e:	87 ea       	ldi	r24, 0xA7	; 167
 2a0:	91 e6       	ldi	r25, 0x61	; 97
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <user_choice+0xae>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <user_choice+0xb4>
 2a8:	00 00       	nop
			_delay_ms(1000);
		
		case '2':
			usart_tx(0x0d);
 2aa:	8d e0       	ldi	r24, 0x0D	; 13
 2ac:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <usart_tx>
			PORTC = PORTC | 0b00001101;// turn fan and led on
 2b0:	85 b3       	in	r24, 0x15	; 21
 2b2:	8d 60       	ori	r24, 0x0D	; 13
 2b4:	85 bb       	out	0x15, r24	; 21
			usart_tx(0x0d);
 2b6:	8d e0       	ldi	r24, 0x0D	; 13
 2b8:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <usart_tx>
			user_choice();
 2bc:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <user_choice>
 2c0:	9f e3       	ldi	r25, 0x3F	; 63
 2c2:	2d e0       	ldi	r18, 0x0D	; 13
 2c4:	83 e0       	ldi	r24, 0x03	; 3
 2c6:	91 50       	subi	r25, 0x01	; 1
 2c8:	20 40       	sbci	r18, 0x00	; 0
 2ca:	80 40       	sbci	r24, 0x00	; 0
 2cc:	e1 f7       	brne	.-8      	; 0x2c6 <user_choice+0xd2>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <user_choice+0xdc>
 2d0:	00 00       	nop
			_delay_ms(10000);
		
		case '3':
			usart_tx(0x0d);
 2d2:	8d e0       	ldi	r24, 0x0D	; 13
 2d4:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <usart_tx>
		
			PORTC = PORTC | 0b00001100;// turn fan on
 2d8:	85 b3       	in	r24, 0x15	; 21
 2da:	8c 60       	ori	r24, 0x0C	; 12
 2dc:	85 bb       	out	0x15, r24	; 21
			usart_tx(0x0d);
 2de:	8d e0       	ldi	r24, 0x0D	; 13
 2e0:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <usart_tx>
			user_choice();
 2e4:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <user_choice>
 2e8:	87 ea       	ldi	r24, 0xA7	; 167
 2ea:	91 e6       	ldi	r25, 0x61	; 97
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <user_choice+0xf8>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <user_choice+0xfe>
 2f2:	00 00       	nop
			_delay_ms(1000);
		case '4':
			usart_tx(0x0d);
 2f4:	8d e0       	ldi	r24, 0x0D	; 13
 2f6:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <usart_tx>
			PORTC = PORTC & 0b11111110;// turn led off
 2fa:	a8 98       	cbi	0x15, 0	; 21
			usart_tx(0x0d);
 2fc:	8d e0       	ldi	r24, 0x0D	; 13
 2fe:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <usart_tx>
			user_choice();
 302:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <user_choice>
 306:	87 ea       	ldi	r24, 0xA7	; 167
 308:	91 e6       	ldi	r25, 0x61	; 97
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <user_choice+0x116>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <user_choice+0x11c>
 310:	00 00       	nop
			_delay_ms(1000);
		case '5':
			usart_tx(0x0d);
 312:	8d e0       	ldi	r24, 0x0D	; 13
 314:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <usart_tx>
		
			PORTC = PORTC & 0b00000101; //turn fan off
 318:	85 b3       	in	r24, 0x15	; 21
 31a:	85 70       	andi	r24, 0x05	; 5
 31c:	85 bb       	out	0x15, r24	; 21
			usart_tx(0x0d);
 31e:	8d e0       	ldi	r24, 0x0D	; 13
 320:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <usart_tx>
			user_choice();
 324:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <user_choice>
 328:	87 ea       	ldi	r24, 0xA7	; 167
 32a:	91 e6       	ldi	r25, 0x61	; 97
 32c:	01 97       	sbiw	r24, 0x01	; 1
 32e:	f1 f7       	brne	.-4      	; 0x32c <user_choice+0x138>
 330:	00 c0       	rjmp	.+0      	; 0x332 <user_choice+0x13e>
 332:	00 00       	nop
			_delay_ms(1000);
		case '6':
			usart_tx(0x0d);
 334:	8d e0       	ldi	r24, 0x0D	; 13
 336:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <usart_tx>
		
			PORTC = PORTC & 0b00000100; //turn everything off and close door
 33a:	85 b3       	in	r24, 0x15	; 21
 33c:	84 70       	andi	r24, 0x04	; 4
 33e:	85 bb       	out	0x15, r24	; 21
			usart_tx(0x0d);
 340:	8d e0       	ldi	r24, 0x0D	; 13
 342:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <usart_tx>
 346:	87 ea       	ldi	r24, 0xA7	; 167
 348:	91 e6       	ldi	r25, 0x61	; 97
 34a:	01 97       	sbiw	r24, 0x01	; 1
 34c:	f1 f7       	brne	.-4      	; 0x34a <user_choice+0x156>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <user_choice+0x15c>
 350:	00 00       	nop
		
			_delay_ms(1000);
			lcd_print("CLOSING DOOR");// print on LCD
 352:	82 e2       	ldi	r24, 0x22	; 34
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_print>
 35a:	9f e3       	ldi	r25, 0x3F	; 63
 35c:	2d e0       	ldi	r18, 0x0D	; 13
 35e:	83 e0       	ldi	r24, 0x03	; 3
 360:	91 50       	subi	r25, 0x01	; 1
 362:	20 40       	sbci	r18, 0x00	; 0
 364:	80 40       	sbci	r24, 0x00	; 0
 366:	e1 f7       	brne	.-8      	; 0x360 <user_choice+0x16c>
 368:	00 c0       	rjmp	.+0      	; 0x36a <user_choice+0x176>
 36a:	00 00       	nop
			_delay_ms(10000);
			main();
 36c:	0e 94 68 02 	call	0x4d0	; 0x4d0 <main>
 370:	08 95       	ret

00000372 <entry>:
//***********************************************************************
void entry()

{

	if ((strcmp(suser,user)==0))
 372:	60 e6       	ldi	r22, 0x60	; 96
 374:	70 e0       	ldi	r23, 0x00	; 0
 376:	87 e9       	ldi	r24, 0x97	; 151
 378:	91 e0       	ldi	r25, 0x01	; 1
 37a:	0e 94 96 02 	call	0x52c	; 0x52c <strcmp>
 37e:	89 2b       	or	r24, r25
 380:	09 f0       	breq	.+2      	; 0x384 <entry+0x12>
 382:	8b c0       	rjmp	.+278    	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>

	{

		lcdcmd(0x01); // clear display screen
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	0e 94 50 00 	call	0xa0	; 0xa0 <lcdcmd>

		lcdcmd(0x02);// return home
 38a:	82 e0       	ldi	r24, 0x02	; 2
 38c:	0e 94 50 00 	call	0xa0	; 0xa0 <lcdcmd>

		lcd_print("ID MATCHED");// print on LCD
 390:	8f e2       	ldi	r24, 0x2F	; 47
 392:	91 e0       	ldi	r25, 0x01	; 1
 394:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_print>
		usart_tx(0x0d);
 398:	8d e0       	ldi	r24, 0x0D	; 13
 39a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <usart_tx>
		usart_msg("ID MATCHED");// print on USART terminal
 39e:	8f e2       	ldi	r24, 0x2F	; 47
 3a0:	91 e0       	ldi	r25, 0x01	; 1
 3a2:	0e 94 e5 00 	call	0x1ca	; 0x1ca <usart_msg>
 3a6:	8f e4       	ldi	r24, 0x4F	; 79
 3a8:	93 ec       	ldi	r25, 0xC3	; 195
 3aa:	01 97       	sbiw	r24, 0x01	; 1
 3ac:	f1 f7       	brne	.-4      	; 0x3aa <entry+0x38>
 3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <entry+0x3e>
 3b0:	00 00       	nop

		_delay_ms(2000);

		lcdcmd(0x01);// clear display screen
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	0e 94 50 00 	call	0xa0	; 0xa0 <lcdcmd>

		lcdcmd(0x02);// return home
 3b8:	82 e0       	ldi	r24, 0x02	; 2
 3ba:	0e 94 50 00 	call	0xa0	; 0xa0 <lcdcmd>
		usart_tx(0x0d);//print in next line in  USART terminal
 3be:	8d e0       	ldi	r24, 0x0D	; 13
 3c0:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <usart_tx>
		usart_msg("ENTER PASSWORD");// print on LCD
 3c4:	8a e3       	ldi	r24, 0x3A	; 58
 3c6:	91 e0       	ldi	r25, 0x01	; 1
 3c8:	0e 94 e5 00 	call	0x1ca	; 0x1ca <usart_msg>

		lcd_print("ENTER PASSWORD");// print on USART terminal
 3cc:	8a e3       	ldi	r24, 0x3A	; 58
 3ce:	91 e0       	ldi	r25, 0x01	; 1
 3d0:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_print>
		usart_tx(0x0d);//print in next line in  USART terminal
 3d4:	8d e0       	ldi	r24, 0x0D	; 13
 3d6:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <usart_tx>
 3da:	87 e8       	ldi	r24, 0x87	; 135
 3dc:	93 e1       	ldi	r25, 0x13	; 19
 3de:	01 97       	sbiw	r24, 0x01	; 1
 3e0:	f1 f7       	brne	.-4      	; 0x3de <entry+0x6c>
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <entry+0x72>
 3e4:	00 00       	nop

		_delay_ms(200);

		lcdcmd(0xc0);//force cursor to beginning of 2nd line
 3e6:	80 ec       	ldi	r24, 0xC0	; 192
 3e8:	0e 94 50 00 	call	0xa0	; 0xa0 <lcdcmd>

		usart_pass();// function to receive  password
 3ec:	0e 94 c2 00 	call	0x184	; 0x184 <usart_pass>

		if((strcmp(spass,pass)==0)) // comparing the predefined password with user entered password 
 3f0:	66 e6       	ldi	r22, 0x66	; 102
 3f2:	70 e0       	ldi	r23, 0x00	; 0
 3f4:	88 e8       	ldi	r24, 0x88	; 136
 3f6:	91 e0       	ldi	r25, 0x01	; 1
 3f8:	0e 94 96 02 	call	0x52c	; 0x52c <strcmp>
 3fc:	89 2b       	or	r24, r25
 3fe:	91 f5       	brne	.+100    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>

		{

			lcdcmd(0x01);// clear display screen
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	0e 94 50 00 	call	0xa0	; 0xa0 <lcdcmd>

			lcdcmd(0x02);// return home
 406:	82 e0       	ldi	r24, 0x02	; 2
 408:	0e 94 50 00 	call	0xa0	; 0xa0 <lcdcmd>

			lcd_print("ID MATCHED");// print on LCD
 40c:	8f e2       	ldi	r24, 0x2F	; 47
 40e:	91 e0       	ldi	r25, 0x01	; 1
 410:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_print>
 414:	8f e4       	ldi	r24, 0x4F	; 79
 416:	93 ec       	ldi	r25, 0xC3	; 195
 418:	01 97       	sbiw	r24, 0x01	; 1
 41a:	f1 f7       	brne	.-4      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 41c:	00 c0       	rjmp	.+0      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41e:	00 00       	nop

			_delay_ms(2000);

			lcdcmd(0x01);// clear display screen
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	0e 94 50 00 	call	0xa0	; 0xa0 <lcdcmd>

			lcd_print("OPENING DOOR");// print on LCD DOOR OPENS as password and id  is matched
 426:	89 e4       	ldi	r24, 0x49	; 73
 428:	91 e0       	ldi	r25, 0x01	; 1
 42a:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_print>
 42e:	87 ea       	ldi	r24, 0xA7	; 167
 430:	91 e6       	ldi	r25, 0x61	; 97
 432:	01 97       	sbiw	r24, 0x01	; 1
 434:	f1 f7       	brne	.-4      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 436:	00 c0       	rjmp	.+0      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 438:	00 00       	nop
 43a:	83 ed       	ldi	r24, 0xD3	; 211
 43c:	90 e3       	ldi	r25, 0x30	; 48
 43e:	01 97       	sbiw	r24, 0x01	; 1
 440:	f1 f7       	brne	.-4      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 442:	00 c0       	rjmp	.+0      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 444:	00 00       	nop
			_delay_ms(1000);


			_delay_ms(500);

			lcdcmd(0x01);// clear display screen
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	0e 94 50 00 	call	0xa0	; 0xa0 <lcdcmd>
			usart_tx(0x0d); //print in next line in  USART terminal
 44c:	8d e0       	ldi	r24, 0x0D	; 13
 44e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <usart_tx>
			user_choice();
 452:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <user_choice>
 456:	87 ea       	ldi	r24, 0xA7	; 167
 458:	91 e6       	ldi	r25, 0x61	; 97
 45a:	01 97       	sbiw	r24, 0x01	; 1
 45c:	f1 f7       	brne	.-4      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 45e:	00 c0       	rjmp	.+0      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 460:	00 00       	nop
 462:	08 95       	ret

		else

		{

			lcdcmd(0x01);// clear display screen
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	0e 94 50 00 	call	0xa0	; 0xa0 <lcdcmd>

			lcdcmd(0x02); // return home
 46a:	82 e0       	ldi	r24, 0x02	; 2
 46c:	0e 94 50 00 	call	0xa0	; 0xa0 <lcdcmd>

			lcd_print("WRONG ENTRY");// print on LCD wrong password 
 470:	86 e5       	ldi	r24, 0x56	; 86
 472:	91 e0       	ldi	r25, 0x01	; 1
 474:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_print>

			lcdcmd(0xc0); //force cursor to beginning of 2nd line
 478:	80 ec       	ldi	r24, 0xC0	; 192
 47a:	0e 94 50 00 	call	0xa0	; 0xa0 <lcdcmd>

			lcd_print("TRY AGAIN");// print on LCD
 47e:	82 e6       	ldi	r24, 0x62	; 98
 480:	91 e0       	ldi	r25, 0x01	; 1
 482:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_print>
 486:	9f e9       	ldi	r25, 0x9F	; 159
 488:	26 e8       	ldi	r18, 0x86	; 134
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	91 50       	subi	r25, 0x01	; 1
 48e:	20 40       	sbci	r18, 0x00	; 0
 490:	80 40       	sbci	r24, 0x00	; 0
 492:	e1 f7       	brne	.-8      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 494:	00 c0       	rjmp	.+0      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 496:	00 00       	nop
 498:	08 95       	ret

	else

	{

		lcdcmd(0x01);// clear display screen
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	0e 94 50 00 	call	0xa0	; 0xa0 <lcdcmd>

		lcdcmd(0x02); // return home
 4a0:	82 e0       	ldi	r24, 0x02	; 2
 4a2:	0e 94 50 00 	call	0xa0	; 0xa0 <lcdcmd>

		lcd_print("INVALID USER");// print on LCD wrong user id
 4a6:	8c e6       	ldi	r24, 0x6C	; 108
 4a8:	91 e0       	ldi	r25, 0x01	; 1
 4aa:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_print>

		lcdcmd(0xc0); //force cursor to beginning of 2nd line
 4ae:	80 ec       	ldi	r24, 0xC0	; 192
 4b0:	0e 94 50 00 	call	0xa0	; 0xa0 <lcdcmd>

		lcd_print("TRY AGAIN");// print on LCD
 4b4:	82 e6       	ldi	r24, 0x62	; 98
 4b6:	91 e0       	ldi	r25, 0x01	; 1
 4b8:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_print>
 4bc:	9f e9       	ldi	r25, 0x9F	; 159
 4be:	26 e8       	ldi	r18, 0x86	; 134
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	91 50       	subi	r25, 0x01	; 1
 4c4:	20 40       	sbci	r18, 0x00	; 0
 4c6:	80 40       	sbci	r24, 0x00	; 0
 4c8:	e1 f7       	brne	.-8      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 4ca:	00 c0       	rjmp	.+0      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4cc:	00 00       	nop
 4ce:	08 95       	ret

000004d0 <main>:

int main(void)

{

	usart_init();
 4d0:	0e 94 49 00 	call	0x92	; 0x92 <usart_init>
	
	DDRA=0xff;//output LCD port
 4d4:	8f ef       	ldi	r24, 0xFF	; 255
 4d6:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0xff;// output port
 4d8:	81 bb       	out	0x11, r24	; 17
	DDRB=0xff;// output port
 4da:	87 bb       	out	0x17, r24	; 23
	DDRC = DDRC | 0b00001111; 
 4dc:	84 b3       	in	r24, 0x14	; 20
 4de:	8f 60       	ori	r24, 0x0F	; 15
 4e0:	84 bb       	out	0x14, r24	; 20
	PORTD =		PORTD | 0b00010000;
 4e2:	94 9a       	sbi	0x12, 4	; 18

	lcdint(); // LCD initialization
 4e4:	0e 94 60 00 	call	0xc0	; 0xc0 <lcdint>

	while(1)

	{

		lcdcmd(0x01); // clear display screen
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	0e 94 50 00 	call	0xa0	; 0xa0 <lcdcmd>

		lcdcmd(0x02); // return home
 4ee:	82 e0       	ldi	r24, 0x02	; 2
 4f0:	0e 94 50 00 	call	0xa0	; 0xa0 <lcdcmd>

		lcdcmd(0x80); // force cursor to beginning of 1st line
 4f4:	80 e8       	ldi	r24, 0x80	; 128
 4f6:	0e 94 50 00 	call	0xa0	; 0xa0 <lcdcmd>

		lcd_print("ENTER USER ID");// print on LCD
 4fa:	89 e7       	ldi	r24, 0x79	; 121
 4fc:	91 e0       	ldi	r25, 0x01	; 1
 4fe:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_print>
		usart_msg("ENTER USER ID");// print on USART terminal
 502:	89 e7       	ldi	r24, 0x79	; 121
 504:	91 e0       	ldi	r25, 0x01	; 1
 506:	0e 94 e5 00 	call	0x1ca	; 0x1ca <usart_msg>
		usart_tx(0x0d); //print in next line in  USART terminal
 50a:	8d e0       	ldi	r24, 0x0D	; 13
 50c:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <usart_tx>
 510:	87 e8       	ldi	r24, 0x87	; 135
 512:	93 e1       	ldi	r25, 0x13	; 19
 514:	01 97       	sbiw	r24, 0x01	; 1
 516:	f1 f7       	brne	.-4      	; 0x514 <main+0x44>
 518:	00 c0       	rjmp	.+0      	; 0x51a <main+0x4a>
 51a:	00 00       	nop
		_delay_ms(200);

		lcdcmd(0xc0);//force cursor to beginning of 2nd line
 51c:	80 ec       	ldi	r24, 0xC0	; 192
 51e:	0e 94 50 00 	call	0xa0	; 0xa0 <lcdcmd>

		usart_user();// Function of receiving user id
 522:	0e 94 a4 00 	call	0x148	; 0x148 <usart_user>

		entry();// function to display options after entering correct id
 526:	0e 94 b9 01 	call	0x372	; 0x372 <entry>
 52a:	de cf       	rjmp	.-68     	; 0x4e8 <main+0x18>

0000052c <strcmp>:
 52c:	fb 01       	movw	r30, r22
 52e:	dc 01       	movw	r26, r24
 530:	8d 91       	ld	r24, X+
 532:	01 90       	ld	r0, Z+
 534:	80 19       	sub	r24, r0
 536:	01 10       	cpse	r0, r1
 538:	d9 f3       	breq	.-10     	; 0x530 <strcmp+0x4>
 53a:	99 0b       	sbc	r25, r25
 53c:	08 95       	ret

0000053e <_exit>:
 53e:	f8 94       	cli

00000540 <__stop_program>:
 540:	ff cf       	rjmp	.-2      	; 0x540 <__stop_program>
